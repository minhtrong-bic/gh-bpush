#!/usr/bin/env bash
# set -eE

#!/bin/bash

# Initialize variables
will_create_pr=""
base_branch=""
will_add_labels=""
labels=()
pr_description=""

# Function to display script usage
function display_usage {
  echo "Usage: $0 [--pr branch] [--label label1 label2 ...]"
  echo ""
  echo "Options:"
  echo "  --pr branch        Specify the target branch for the pull request (required if --pr is used)"
  echo "  --label label1 label2 ..."
  echo "                     Specify labels to be added to the pull request (optional, depends on --pr)"
  echo ""
  echo "  --d description    Provide the description for the pull request. Text is put in a pair of double quotes"
  echo ""
  exit 1
}

# function is_pull_url {
#   local string="$1"
#   local pattern="https://github.com/.*/.*/pull/[0-9]+"
#   local isPullUrl=""

#   if [[ $string =~ $pattern ]]; then
#     isPullUrl="true"
#   else
#     isPullUrl="false"
#   fi

#   echo $isPullUrl
# }

function is_add_label_error {
	local string="$1"

  local pattern="could not add label.*"
  local isError=""

  if [[ $string =~ $pattern ]]; then
    isError="true"
  else
    isError="false"
  fi

  echo $isError
}

function create_label {
	local label="$1"
	local cmd="gh label create $label"

	output=$(eval "$cmd")
	echo $output
}

# Parse the command-line options
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    --pr)
      will_create_pr="1"
      base_branch="$2"
      shift
      shift
      ;;
    --label)
      will_add_labels=1
      shift
      while [[ $# -gt 0 ]] && [[ "$1" != "--"* ]]; do
        labels+=("$1")
        shift
      done
      ;;
    --d)
      pr_description="$2"
      shift
      shift
      ;;
    *)
      display_usage
      ;;
  esac
done


# Check if required options are provided
if [[ -n "$will_create_pr" ]] && [[ -z "$base_branch" ]]; then
  echo "Error: base branch name is require when --pr is used."
  display_usage
fi

if [[ -n "$will_add_labels" ]] && [[ ${#labels[@]} -eq 0 ]]; then
  echo "Error: if --label is used, at least 1 label is required."
  display_usage
fi

# Output the options
# Get the current branch name
current_branch=$(git rev-parse --abbrev-ref HEAD)

# Push the current branch to the remote repository
git push origin $current_branch


# Create a pull request from the new branch to the specified branch
# Replace "your_specified_branch" with the actual branch name you want to create a pull request to
# Replace "Your Pull Request Title" and "Your Pull Request Body" with your desired title and body
if [[ -n "$will_create_pr" ]]; then
	create_pr_cmd="gh pr create --fill --base $base_branch --head $current_branch --label $base_branch"
	if [[ -n "$will_add_labels" ]]; then
		for label in "${labels[@]}"; do
		  create_pr_cmd+=" --label $label"
		done
	fi


  if [[ ! -z "$pr_description" ]]; then
    create_pr_cmd+=" --body \"$pr_description\""
  fi



	if ! pr_output=$(eval "$create_pr_cmd" 2>&1); then
	  isAddLabelError=$(is_add_label_error "$pr_output")
		if [[ "$isAddLabelError" = "true" ]]; then
			echo "Some labels do not exist. Try to create all of them. Please ignore errors if there is any label that already created"
			create_label $base_branch
			for label in "${labels[@]}"; do
			  create_label $label
			done
			if ! pr_output=$(eval "$create_pr_cmd" 2>&1); then
				echo "PR creating error: $pr_output"
	  		exit 1
			fi
		else
			echo "PR creating error: $pr_output"
	  	exit 1
	  fi
	fi

	echo "PR created: $pr_output"

fi

# isPullUrl=$(is_pull_url $pr_output)

# if [[ "$isPullUrl" = "true" ]]; then
	
# 	echo "PR created: $pr_output"
# fi

# echo "Current Branch: $current_branch"
# echo "Will Create PR: $will_create_pr"
# echo "PR Branch: $pr_branch"
# echo "Will Add Labels: $will_add_labels"
# echo "Labels: ${labels[@]}"

# Snippets to help get started:

# Determine if an executable is in the PATH
# if ! type -p ruby >/dev/null; then
#   echo "Ruby not found on the system" >&2
#   exit 1
# fi

# Pass arguments through to another command
# gh issue list "$@" -R cli/cli

# Using the gh api command to retrieve and format information
# QUERY='
#   query($endCursor: String) {
#     viewer {
#       repositories(first: 100, after: $endCursor) {
#         nodes {
#           nameWithOwner
#           stargazerCount
#         }
#       }
#     }
#   }
# '
# TEMPLATE='
#   {{- range $repo := .data.viewer.repositories.nodes -}}
#     {{- printf "name: %s - stargazers: %v\n" $repo.nameWithOwner $repo.stargazerCount -}}
#   {{- end -}}
# '
# exec gh api graphql -f query="${QUERY}" --paginate --template="${TEMPLATE}"
